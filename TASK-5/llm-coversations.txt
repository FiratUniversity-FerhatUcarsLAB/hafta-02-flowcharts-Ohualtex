Akıllı Ev Güvenlik Sistemi yalın pseudocode oluştur.

Aşağıdaki yalın pseudocode, “bölge (zone) tabanlı”, sensör–durum–olay mantığıyla çalışan tipik bir Akıllı Ev Güvenlik Sistemi çekirdeğini anlatır.
Donanım soyutlamaları (GPIO, kamera, ağ) basit fonksiyon adlarıyla temsil edilmiştir.

// ===============================
// KONFİGÜRASYON
// ===============================
CONST ENTRY_DELAY_MS   = 20000     // giriş gecikmesi
CONST EXIT_DELAY_MS    = 30000     // çıkış gecikmesi
CONST ALARM_DURATION_MS= 300000    // siren süresi (5 dk)
CONST HEARTBEAT_MS     = 5000
CONST MAX_PIN_TRIES    = 5

STRUCT Zone {
    id: INT
    name: STRING
    type: ENUM{INSTANT, ENTRY_EXIT, INTERIOR, SMOKE, WATER, TAMPER}
    enabled_when_armed_away: BOOL
    enabled_when_armed_stay: BOOL
    sensor_read: FUNC -> BOOL // true: tetik
}

STRUCT Event {
    ts: TIME
    type: ENUM{ARM, DISARM, ALARM, SENSOR_TRIP, TAMPER, POWER_FAIL, NET_FAIL}
    detail: STRING
}

GLOBAL state = ENUM{DISARMED, EXIT_DELAY, ARMED_STAY, ARMED_AWAY, ENTRY_DELAY, ALARM}
GLOBAL pin_fail_count = 0
GLOBAL zones = ARRAY<Zone>
GLOBAL alarm_timer = 0
GLOBAL entry_timer = 0
GLOBAL exit_timer = 0
GLOBAL siren_on = FALSE

// Bildirim/kayıt arayüzleri
FUNC Log(e: Event) { persist(e) }
FUNC Notify(msg: STRING) { push_to_app(msg); if(net_down()) queue_for_retry(msg) }

// Donanım soyutlamaları
FUNC Siren(on: BOOL) { gpio_write(SIREN_PIN, on) }
FUNC Strobe(on: BOOL) { gpio_write(STROBE_PIN, on) }
FUNC LockAllDoors() { relay_all_locks(LOCK) }
FUNC UnlockAllDoors() { relay_all_locks(UNLOCK) }
FUNC CaptureClip(seconds: INT) { camera_record(seconds) }
FUNC Now() -> TIME { return system_time() }

// ===============================
// YARDIMCI FONKSİYONLAR
// ===============================
FUNC AnyTriggered(zset: ARRAY<Zone>) -> Zone|NULL {
    FOR z IN zset:
        IF z.sensor_read() == TRUE:
            RETURN z
    RETURN NULL
}

FUNC ActiveZonesFor(mode) -> ARRAY<Zone> {
    IF mode == ARMED_AWAY:
        RETURN [z FOR z IN zones WHERE z.enabled_when_armed_away]
    IF mode == ARMED_STAY:
        RETURN [z FOR z IN zones WHERE z.enabled_when_armed_stay]
    RETURN [] // disarmed
}

FUNC IsEntryExit(z: Zone) -> BOOL { return z.type == ENTRY_EXIT }
FUNC IsInstant(z: Zone) -> BOOL { return z.type == INSTANT }
FUNC IsLifeSafety(z: Zone) -> BOOL { return z.type IN {SMOKE, WATER} }
FUNC IsTamper(z: Zone) -> BOOL { return z.type == TAMPER }

// ===============================
// DURUM GEÇİŞLERİ
// ===============================
PROC ArmStay():
    IF state != DISARMED: RETURN
    exit_timer = EXIT_DELAY_MS
    state = EXIT_DELAY
    mode_after_exit = ARMED_STAY
    Notify("Çıkış gecikmesi başladı (Stay).")
    Log(Event{Now(), ARM, "stay"})

PROC ArmAway():
    IF state != DISARMED: RETURN
    exit_timer = EXIT_DELAY_MS
    state = EXIT_DELAY
    mode_after_exit = ARMED_AWAY
    Notify("Çıkış gecikmesi başladı (Away).")
    Log(Event{Now(), ARM, "away"})

PROC Disarm(pin: STRING):
    IF verify_pin(pin) == FALSE:
        pin_fail_count += 1
        IF pin_fail_count >= MAX_PIN_TRIES:
            Notify("PIN çok sayıda hatalı girildi.")
            Log(Event{Now(), TAMPER, "pin brute-force"})
        RETURN
    pin_fail_count = 0
    state = DISARMED
    alarm_timer = 0
    entry_timer = 0
    Siren(FALSE); Strobe(FALSE)
    Notify("Sistem devre dışı.")
    Log(Event{Now(), DISARM, ""})

PROC TriggerAlarm(reason: STRING):
    state = ALARM
    alarm_timer = ALARM_DURATION_MS
    Siren(TRUE); Strobe(TRUE)
    CaptureClip(30)
    LockAllDoors()
    Notify("ALARM: " + reason)
    Log(Event{Now(), ALARM, reason})

// ===============================
// ANA DÖNGÜ
// ===============================
LOOP forever:
    // 1) Yaşam güvenliği her zaman aktif
    FOR z IN zones:
        IF IsLifeSafety(z) AND z.sensor_read():
            TriggerAlarm("Yaşam güvenliği: " + z.name)

    SWITCH state:

        CASE DISARMED:
            // isteğe bağlı: kapı/çıkış açık uyarıları
            pass

        CASE EXIT_DELAY:
            IF exit_timer > 0:
                exit_timer -= tick()
            ELSE:
                state = mode_after_exit
                Notify("Sistem kuruldu: " + to_string(state))

        CASE ARMED_STAY:
            az = ActiveZonesFor(ARMED_STAY)
            t = AnyTriggered(az)
            IF t != NULL:
                IF IsEntryExit(t):
                    entry_timer = ENTRY_DELAY_MS
                    state = ENTRY_DELAY
                    Notify("Giriş gecikmesi başladı.")
                ELSE IF IsInstant(t) OR IsTamper(t):
                    TriggerAlarm("Bölge: " + t.name)

        CASE ARMED_AWAY:
            az = ActiveZonesFor(ARMED_AWAY)
            t = AnyTriggered(az)
            IF t != NULL:
                IF IsEntryExit(t):
                    entry_timer = ENTRY_DELAY_MS
                    state = ENTRY_DELAY
                    Notify("Giriş gecikmesi başladı.")
                ELSE:
                    TriggerAlarm("Bölge: " + t.name)

        CASE ENTRY_DELAY:
            IF entry_timer > 0:
                entry_timer -= tick()
                // Bu sırada panelden geçerli PIN gelirse Disarm çağrılır
            ELSE:
                TriggerAlarm("Giriş gecikmesi aşıldı.")

        CASE ALARM:
            IF alarm_timer > 0:
                alarm_timer -= tick()
            ELSE:
                // alarm süresi bitti, tekrar kurulu kalır
                Siren(FALSE); Strobe(FALSE)
                Notify("Alarm süresi doldu.")
                // tercihen kurulu mod korunur
                IF previous_mode IN {ARMED_STAY, ARMED_AWAY}:
                    state = previous_mode
                ELSE:
                    state = DISARMED

    // 2) Sağlık kontrolleri
    IF power_fail_detected():
        Notify("Güç kesintisi algılandı.")
        Log(Event{Now(), POWER_FAIL, ""})
    IF network_problem_detected():
        Notify("Ağ problemi algılandı.")
        Log(Event{Now(), NET_FAIL, ""})

    // 3) Heartbeat ve minimal bakım
    EVERY HEARTBEAT_MS:
        send_heartbeat_summary(state)
        rotate_logs_if_needed()

END LOOP

// ===============================
// OLAY TETİKÇİLERİ (ISR/EVENTS)
// ===============================
ON keypad_pin_entered(pin):
    IF state IN {ENTRY_DELAY, ARMED_STAY, ARMED_AWAY, ALARM}:
        Disarm(pin)
    ELSE:
        // hızlı kurulum kısayolları
        IF pin == quick_arm_stay_code(): ArmStay()
        IF pin == quick_arm_away_code(): ArmAway()

ON mobile_command(cmd):
    SWITCH cmd.type:
        CASE "ARM_STAY": ArmStay()
        CASE "ARM_AWAY": ArmAway()
        CASE "DISARM": Disarm(cmd.pin)
        CASE "BYPASS_ZONE": disable_zone(cmd.zone_id)
        CASE "LOCK_ALL": LockAllDoors()
        CASE "UNLOCK_ALL": UnlockAllDoors()

ON zone_tamper_detected(zid):
    TriggerAlarm("Müdahale: " + get_zone(zid).name)

// ===============================
// ZONE TANIM ÖRNEKLERİ
// ===============================
INIT zones = [
    Zone{1,"Giriş Kapısı", ENTRY_EXIT, true, true, read_contact_1},
    Zone{2,"Salon PIR",    INTERIOR,  true, false, read_pir_living},
    Zone{3,"Pencere-1",    INSTANT,   true, true,  read_contact_2},
    Zone{4,"Duman",        SMOKE,     true, true,  read_smoke},
    Zone{5,"Su Kaçağı",    WATER,     true, true,  read_water},
    Zone{6,"Panel Kapağı", TAMPER,    true, true,  read_tamper}
]

// ===============================
// İSTEĞE BAĞLI MODÜLLER (kısa)
// ===============================

// Akıllı sahne: alarm sırasında ışıkları yakıp flaşla
PROC AlarmLightingScene():
    IF state == ALARM:
        smart_lights_flash_all()

// Basit öğrenme: yanlış alarm yapan bölgeyi raporla
PROC FalseAlarmTracker(z: Zone, user_marked_false: BOOL):
    IF user_marked_false:
        increment_false_count(z)
        IF false_count(z) > THRESHOLD:
            Suggest("Bölge " + z.name + " hassasiyet ayarı düşürülsün.")

// Gece modu (Stay kurulu iken bazı sensörleri devre dışı)
SCHEDULE every 23:00 -> enable_night_profile()
SCHEDULE every 06:30 -> disable_night_profile()

dot diline çevir

Pseudocode’daki mantığı durum geçiş diyagramı şeklinde DOT diline çevirelim. DOT (Graphviz) formatı, özellikle finite state machine (sonlu durum makinesi) görselleştirmek için çok uygundur. Aşağıda, sistemin temel durumları (DISARMED, EXIT_DELAY, ARMED_STAY, ARMED_AWAY, ENTRY_DELAY, ALARM) ve bunlar arasındaki geçişler gösterilmiştir:

digraph SmartHomeSecurityFSM {
    rankdir=LR;
    node [shape=ellipse, fontsize=12, fontname="Arial"];

    DISARMED     [label="DISARMED\n(Sistem Kapalı)"];
    EXIT_DELAY   [label="EXIT_DELAY\n(Çıkış Gecikmesi)"];
    ARMED_STAY   [label="ARMED_STAY\n(Kurulu - Evde)"];
    ARMED_AWAY   [label="ARMED_AWAY\n(Kurulu - Ev Dışı)"];
    ENTRY_DELAY  [label="ENTRY_DELAY\n(Giriş Gecikmesi)"];
    ALARM        [label="ALARM\n(Siren Çalışıyor)"];

    // Başlangıç
    start [shape=point];
    start -> DISARMED;

    // Kurma
    DISARMED -> EXIT_DELAY [label="ArmStay() / ArmAway()"];
    EXIT_DELAY -> ARMED_STAY [label="Süre bitti (Stay)"];
    EXIT_DELAY -> ARMED_AWAY [label="Süre bitti (Away)"];

    // Sensör tetiklenmesi
    ARMED_STAY -> ENTRY_DELAY [label="EntryExit sensör"];
    ARMED_AWAY -> ENTRY_DELAY [label="EntryExit sensör"];
    ARMED_STAY -> ALARM       [label="Instant/Tamper sensör"];
    ARMED_AWAY -> ALARM       [label="Instant/Tamper sensör"];

    // Giriş gecikmesi
    ENTRY_DELAY -> ALARM      [label="Süre bitti"];
    ENTRY_DELAY -> DISARMED   [label="Geçerli PIN"];

    // Alarm
    ALARM -> DISARMED   [label="PIN ile kapatma"];
    ALARM -> ARMED_STAY [label="Süre doldu (önce Stay)"];
    ALARM -> ARMED_AWAY [label="Süre doldu (önce Away)"];

    // Manuel devreden çıkarma
    ARMED_STAY -> DISARMED [label="PIN"];
    ARMED_AWAY -> DISARMED [label="PIN"];
}

Mantığını anlat.

Mantık: DOT diyagramındaki güvenlik FSM’i nasıl çalışır?

Aklındaki şema bir sonlu durum makinesi (Finite State Machine – FSM). Sistem, tek bir anda tek bir “durum”da olur ve olaylar (sensör tetiklemesi, sürelerin dolması, PIN girişi gibi) geldiğinde geçiş yapar. Zihin haritası şöyle:

Temel durumlar

DISARMED – Sistem kapalı. Sensörler izlenir ama alarm üretmez (yaşam güvenliği hariç).

EXIT_DELAY – Kurma tuşuna bastın; evden çıkman için süre tanınır.

ARMED_STAY – Evdeyken kurulu mod. İç mekân (INTERIOR) sensörleri tipik olarak devre dışı; giriş/çıkış ve anlık bölgeler devrede.

ARMED_AWAY – Evde kimse yokken kurulu mod. İç mekân dâhil ilgili bölgeler devrede.

ENTRY_DELAY – Giriş kapısından geldin; alarm çalmadan önce PIN girmen için süre.

ALARM – Siren/strobe aktif, kayıt/bildirim/kapı kilitleme gibi tepkiler çalışır.

Geçişlerin mantığı

Başlangıç → DISARMED.

DISARMED → EXIT_DELAY: “Stay” ya da “Away” kurma komutu.

EXIT_DELAY → ARMED_STAY/ARMED_AWAY: Çıkış süresi biter; hangi modu seçtiysen ona geçilir.

ARMED_ → ENTRY_DELAY*: ENTRY_EXIT türü bir bölge tetiklenirse (örn. giriş kapısı).

ARMED_STAY → ALARM: INSTANT veya TAMPER (sabotaj) tetiklenirse doğrudan alarm.

ARMED_AWAY → ALARM: Giriş-çıkış dışındaki yetkili bölgeler tetiklenirse doğrudan alarm.

ENTRY_DELAY → DISARMED: Süre dolmadan geçerli PIN girilirse.

ENTRY_DELAY → ALARM: Süre aşılırsa.

ALARM → DISARMED: Geçerli PIN ile susturma.

ALARM → ARMED_STAY/ARMED_AWAY: Alarm süresi kendiliğinden biterse, önceki kurulu moda geri dönebilir (tasarım tercihi).

ARMED_ → DISARMED*: Kullanıcı PIN ile manuel devreden çıkarır.

Bölge (zone) türleri neden kritik?

ENTRY_EXIT: Giriş gecikmesi kuralı uygulanır (ENTRY_DELAY). Yani kurulu iken kapıyı açınca hemen siren çalmaz; PIN için süre tanınır.

INSTANT: Kuruluyken tetiklenirse gecikme yok, direkt ALARM.

INTERIOR: Genelde Away modunda aktif, Stay modunda pasif (evde dolaşmaya izin vermek için).

SMOKE / WATER (Yaşam Güvenliği): Her zaman aktif. DISARMED olsa bile alarm tetikler; güvenlik politikası gereği önceliklidir.

TAMPER: Panel kapağı/sensör sabotajında gecikmesiz alarm.

Zamanlayıcılar ve yan etkiler

EXIT_DELAY: Evden çıkma payı.

ENTRY_DELAY: Eve girişte PIN payı.

ALARM_DURATION: Siren/strobe açık kalma süresi. Bittiğinde sistem ya kurulu kalır ya da DISARMED’a döner (tasarım seçeneği).

Alarm tetiklenince yan etkiler çalıştırılır: siren/strobe, kamera klibi, kapı kilitleme, bildirim/log.

“Stay” ve “Away” farkının özeti

Stay: İç mekân hareket sensörleri genellikle devre dışı, giriş/çıkış ve anlık bölgeler devrede. Evde dolaşabilirsin; kapıdan giriş yaparsan PIN süren var.

Away: İç mekân dahil geniş kapsamlı koruma. Giriş/çıkış dışı bir tetikleme varsa doğrudan alarm.

Yaşam güvenliği istisnası

DISARMED dâhil her durumda duman/su kaçağı gibi yaşam güvenliği sinyalleri alarm üretir. Bu, hırsızlıktan farklı bir risk kategorisi olduğu için gecikmesiz ele alınır.

Sağlık kontrolleri ve kötü niyet

PIN yanlış denemeleri sayılır; limit aşılırsa sabotaj/uyarı üretilebilir.

Güç veya ağ kesintileri olay olarak loglanır ve bildirilir; ağ yoksa iletiler kuyruğa alınır.

Periyodik heartbeat ile durum özeti raporlanır, log rotasyonu yapılır.

Neden FSM iyi bir model?

Deterministik: Aynı olay geldiğinde aynı durumdan aynı geçiş olur.

Kanıtlanabilir: “Bu sensör şu durumda tetiklenirse ne olur?” sorusu diyagramdan okunur.

Test edilebilir: Her geçiş, birim test senaryosuna eşlenebilir (ör. “ARMED_AWAY + ENTRY_EXIT → ENTRY_DELAY”).

Uygulama notu

DOT diyagramı sadece akışı anlatır; politika (hangi zone hangi modda aktif), zaman değerleri, donanım yan etkileri (siren, strobe, kamera, kilit) şemanın dışında parametrelenir. Bu ayrım, görselleştirmeyi sade tutar ve gerçek cihaz/SDK’ye geçerken yüzeyi netleştirir.

Bir sonraki genişletme olarak: zone türlerini alt kümeler halinde gösteren bir altgraf (subgraph) katmanı veya “olay” düğümleri eklenmiş etki grafiği üretilip test senaryolarıyla (Given–When–Then) ilişkilendirilebilir.
